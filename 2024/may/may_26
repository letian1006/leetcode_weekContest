"""
399场周赛的题目 两题选手
给出第四题的代码

"""

from typing import List

MOD = 10 ** 9 + 7


class Solution:
    """
    链接: https://leetcode.cn/problems/maximum-sum-of-subsequence-with-non-adjacent-elements/description/
    描述:
    给你一个整数数组 nums 和一个二维数组 queries，其中 queries[i] = [posi, xi]。
    对于每个查询 i，首先将 nums[posi] 设置为 xi，然后计算查询 i 的答案，该答案为 nums 中 不包含相邻元素 的
    子序列的 最大 和。返回所有查询的答案之和。
    由于最终答案可能非常大，返回其对 1e9 + 7 取余 的结果。
    子序列 是指从另一个数组中删除一些或不删除元素而不改变剩余元素顺序得到的数组。
    示例:
    输入：nums = [3,5,9], queries = [[1,-2],[0,-3]]
    输出：21
    解释：
    执行第 1 个查询后，nums = [3,-2,9]，不包含相邻元素的子序列的最大和为 3 + 9 = 12。
    执行第 2 个查询后，nums = [-3,-2,9]，不包含相邻元素的子序列的最大和为 9 。
    """

    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:
        # 可以修改数组值的打家劫舍版本
        # 单点修改的线段树 维护区间信息
        # 00 两头都不要的打家劫舍dp最大值 01左边不要右边可要可不要的最大dp值
        # 10 左边可要可不要的dp最大值  11两边都是可要可不要的dp最大值
        n = len(nums)
        tree = [[0] * 4 for _ in range((n << 2))]

        def max(a, b):
            return a if a > b else b

        def maintain(o):
            tree[o][0] = max(tree[o << 1][1] + tree[o << 1 | 1][0],
                             tree[o << 1][0] + tree[o << 1 | 1][2])  # 两头都不要的最大dp值如何更新
            tree[o][1] = max(tree[o << 1][0] + tree[o << 1 | 1][3], tree[o << 1][1] + tree[o << 1 | 1][1])
            tree[o][2] = max(tree[o << 1][3] + tree[o << 1 | 1][0], tree[o << 1][2] + tree[o << 1 | 1][2])
            tree[o][3] = max(tree[o << 1][2] + tree[o << 1 | 1][3], tree[o << 1][3] + tree[o << 1 | 1][1])

        def build(o, l, r):
            if l == r:
                tree[o][-1] = max(0, nums[l])
                return
            m = l + r >> 1
            build(o << 1, l, m)
            build(o << 1 | 1, m + 1, r)
            maintain(o)

        def modify(o, l, r, index, val):
            if l == r:
                tree[o][-1] = max(val, 0)
                return
            m = l + r >> 1
            if index <= m:
                modify(o << 1, l, m, index, val)
            else:
                modify(o << 1 | 1, m + 1, r, index, val)
            maintain(o)

        build(1, 0, n - 1)
        ans = 0
        for p, x in queries:
            modify(1, 0, n - 1, p, x)
            ans += tree[1][-1]  # 两头可要可不要的最大dp值 也就是打家劫舍的最大dp值

        return ans % MOD
